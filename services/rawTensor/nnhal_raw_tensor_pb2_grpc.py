# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nnhal_raw_tensor_pb2 as nnhal__raw__tensor__pb2


class DetectionStub(object):
    """The Detection service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getInferResult = channel.unary_unary(
                '/objectDetection.Detection/getInferResult',
                request_serializer=nnhal__raw__tensor__pb2.RequestDataTensors.SerializeToString,
                response_deserializer=nnhal__raw__tensor__pb2.ReplyDataTensors.FromString,
                )
        self.sendXml = channel.stream_unary(
                '/objectDetection.Detection/sendXml',
                request_serializer=nnhal__raw__tensor__pb2.RequestDataChunks.SerializeToString,
                response_deserializer=nnhal__raw__tensor__pb2.ReplyStatus.FromString,
                )
        self.sendBin = channel.stream_unary(
                '/objectDetection.Detection/sendBin',
                request_serializer=nnhal__raw__tensor__pb2.RequestDataChunks.SerializeToString,
                response_deserializer=nnhal__raw__tensor__pb2.ReplyStatus.FromString,
                )
        self.prepare = channel.unary_unary(
                '/objectDetection.Detection/prepare',
                request_serializer=nnhal__raw__tensor__pb2.RequestString.SerializeToString,
                response_deserializer=nnhal__raw__tensor__pb2.ReplyStatus.FromString,
                )


class DetectionServicer(object):
    """The Detection service definition.
    """

    def getInferResult(self, request, context):
        """Send Input Blobs and receive Output Blobs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendXml(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendBin(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def prepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DetectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getInferResult': grpc.unary_unary_rpc_method_handler(
                    servicer.getInferResult,
                    request_deserializer=nnhal__raw__tensor__pb2.RequestDataTensors.FromString,
                    response_serializer=nnhal__raw__tensor__pb2.ReplyDataTensors.SerializeToString,
            ),
            'sendXml': grpc.stream_unary_rpc_method_handler(
                    servicer.sendXml,
                    request_deserializer=nnhal__raw__tensor__pb2.RequestDataChunks.FromString,
                    response_serializer=nnhal__raw__tensor__pb2.ReplyStatus.SerializeToString,
            ),
            'sendBin': grpc.stream_unary_rpc_method_handler(
                    servicer.sendBin,
                    request_deserializer=nnhal__raw__tensor__pb2.RequestDataChunks.FromString,
                    response_serializer=nnhal__raw__tensor__pb2.ReplyStatus.SerializeToString,
            ),
            'prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.prepare,
                    request_deserializer=nnhal__raw__tensor__pb2.RequestString.FromString,
                    response_serializer=nnhal__raw__tensor__pb2.ReplyStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'objectDetection.Detection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Detection(object):
    """The Detection service definition.
    """

    @staticmethod
    def getInferResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/objectDetection.Detection/getInferResult',
            nnhal__raw__tensor__pb2.RequestDataTensors.SerializeToString,
            nnhal__raw__tensor__pb2.ReplyDataTensors.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendXml(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/objectDetection.Detection/sendXml',
            nnhal__raw__tensor__pb2.RequestDataChunks.SerializeToString,
            nnhal__raw__tensor__pb2.ReplyStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendBin(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/objectDetection.Detection/sendBin',
            nnhal__raw__tensor__pb2.RequestDataChunks.SerializeToString,
            nnhal__raw__tensor__pb2.ReplyStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/objectDetection.Detection/prepare',
            nnhal__raw__tensor__pb2.RequestString.SerializeToString,
            nnhal__raw__tensor__pb2.ReplyStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
